$default-browser-font-size: 16px;
$base-font-size: 10px;

/// Returns the value in rem for a given pixel value.
/// @param {Number} $value - The pixel value to be converted.
/// @return {Number} The converted value in rem.

@function rem($value) {
    $unit: unit($value);

    @if $value == 0 {
        @return 0;
    } @else if $unit == 'rem' {
        @return $value;
    } @else if $unit == 'px' {
        @return $value / $base-font-size * 1rem;
    } @else if $unit == 'em' {
        @return $unit / 1em * 1rem;
    } @else {
        @error 'Value must be in px, em, or rem.';
    }
}

/// Returns the value in pixels for a given rem value.
/// @param {Number} $value - The rem value to be converted.
/// @return {Number} The converted value in pixels.

@function px($value) {
    $unit: unit($value);

    @if $value == 0 {
        @return 0;
    } @else if $unit == 'px' {
        @return $value;
    } @else if $unit == 'em' {
        @return ($value / 1em) * $base-font-size;
    } @else if $unit == 'rem' {
        @return ($value / 1rem) * $base-font-size;
    } @else {
        @error 'Value must be in rem, em, or px.';
    }
}

/// Returns the value in pixels for a given pixel value. Note that this
/// only works for elements that have had no font-size changes.
/// @param {Number} $value - The pixel value to be converted.
/// @return {Number} The converted value in ems.

@function em($value) {
    $unit: unit($value);

    @if $value == 0 {
        @return 0;
    } @else if $unit == 'em' {
        @return $value;
    } @else if $unit == 'rem' {
        @return $value / 1rem * 1em * ($base-font-size / $default-browser-font-size);
    } @else if $unit == 'px' {
        @return $value / $default-browser-font-size * 1em;
    } @else {
        @error 'Value must be in px, rem, or em.';
    }
}

/// Returns the list of available names in a given map.
/// @param {Map} $map - The map of data to list the names from.
/// @param {Number} $map - The level of depth to get names from.
/// @return {String} The list of names in the map.

@function available-names($map, $level: 1) {
    @if type-of($map) != 'map' {
        @return null;
    }

    $output: '';
    $newline: '\A ';

    @if $level == 1 {
        @each $key, $value in $map {
            $output: $output +
                '#{$newline}- #{$key} #{available-names($value, $level + 1)}';
        }
    } @else {
        $output: '(';
        $i: 1;

        @each $key, $value in $map {
            $sep: if($i < length($map), ', ', '');
            $output: $output +
                '#{$key}#{$sep}#{available-names($value, $level + 1)}';
            $i: $i + 1;
        }

        $output: $output + ')';
    }

    @return $output;
}

$unit: 4px;

$spacing-data: (
    none: 0,
    extra-tight: rem($unit),
    tight: rem($unit * 2),
    base: rem($unit * 4),
    loose: rem($unit * 5),
    extra-loose: rem($unit * 8)
);

/// Returns the spacing value for a given variant.
///
/// @param {String} $variant - The key for the given variant.
/// @return {Number} The spacing for the variant.

@function spacing($variant: base) {
    $fetched-value: map-get($spacing-data, $variant);

    @if type-of($fetched-value) == number {
        @return $fetched-value;
    } @else {
        @error 'Spacing variant `#{$variant}` not found. Available variants: #{available-names($spacing-data)}';
    }
}

:export {
    spacing: {
        extra-tight: spacing(extra-tight);
        tight: spacing(tight);
        base: spacing();
        loose: spacing(loose);
        extra-loose: spacing(extra-loose);
    }
}
